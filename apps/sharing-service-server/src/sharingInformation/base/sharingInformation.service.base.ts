/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  SharingInformation as PrismaSharingInformation,
} from "@prisma/client";

export class SharingInformationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SharingInformationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.sharingInformation.count(args);
  }

  async sharingInformations(
    args: Prisma.SharingInformationFindManyArgs
  ): Promise<PrismaSharingInformation[]> {
    return this.prisma.sharingInformation.findMany(args);
  }
  async sharingInformation(
    args: Prisma.SharingInformationFindUniqueArgs
  ): Promise<PrismaSharingInformation | null> {
    return this.prisma.sharingInformation.findUnique(args);
  }
  async createSharingInformation(
    args: Prisma.SharingInformationCreateArgs
  ): Promise<PrismaSharingInformation> {
    return this.prisma.sharingInformation.create(args);
  }
  async updateSharingInformation(
    args: Prisma.SharingInformationUpdateArgs
  ): Promise<PrismaSharingInformation> {
    return this.prisma.sharingInformation.update(args);
  }
  async deleteSharingInformation(
    args: Prisma.SharingInformationDeleteArgs
  ): Promise<PrismaSharingInformation> {
    return this.prisma.sharingInformation.delete(args);
  }
}
