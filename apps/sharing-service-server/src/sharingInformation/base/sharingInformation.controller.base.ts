/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SharingInformationService } from "../sharingInformation.service";
import { SharingInformationCreateInput } from "./SharingInformationCreateInput";
import { SharingInformation } from "./SharingInformation";
import { SharingInformationFindManyArgs } from "./SharingInformationFindManyArgs";
import { SharingInformationWhereUniqueInput } from "./SharingInformationWhereUniqueInput";
import { SharingInformationUpdateInput } from "./SharingInformationUpdateInput";

export class SharingInformationControllerBase {
  constructor(protected readonly service: SharingInformationService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SharingInformation })
  async createSharingInformation(
    @common.Body() data: SharingInformationCreateInput
  ): Promise<SharingInformation> {
    return await this.service.createSharingInformation({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SharingInformation] })
  @ApiNestedQuery(SharingInformationFindManyArgs)
  async sharingInformations(
    @common.Req() request: Request
  ): Promise<SharingInformation[]> {
    const args = plainToClass(SharingInformationFindManyArgs, request.query);
    return this.service.sharingInformations({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SharingInformation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async sharingInformation(
    @common.Param() params: SharingInformationWhereUniqueInput
  ): Promise<SharingInformation | null> {
    const result = await this.service.sharingInformation({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SharingInformation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSharingInformation(
    @common.Param() params: SharingInformationWhereUniqueInput,
    @common.Body() data: SharingInformationUpdateInput
  ): Promise<SharingInformation | null> {
    try {
      return await this.service.updateSharingInformation({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SharingInformation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSharingInformation(
    @common.Param() params: SharingInformationWhereUniqueInput
  ): Promise<SharingInformation | null> {
    try {
      return await this.service.deleteSharingInformation({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
